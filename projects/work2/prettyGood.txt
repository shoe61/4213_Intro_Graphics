//
// Display a color cube
//
// Colors are assigned to each vertex and then the rasterizer interpolates
//   those colors across the triangles.  We us an orthographic projection
//   as the default projection.

#include "Angel.h"

#pragma comment(lib, "freeglut")
#pragma comment(lib, "glew32")

typedef Angel::vec4  color4;
typedef Angel::vec4  point4;

const int NumVertices = 36; //(6 faces)(2 triangles/face)(3 vertices/triangle)

//----------------------------------------------------------------------------

class Cube
   {      
   private:
      int Index = 0;
      
      point4 points[NumVertices];
      color4 colors[NumVertices];
      
      //vertices      
      point4 vertices[8];

      // RGBA colors
      color4 vertex_colors[];
      
      void quad(int, int, int, int);

   public:
      
      Cube();
      
      void load(GLuint);
      
      void draw();

      ~Cube();
   
   };

//----------------------------------------------------------------------------

Cube::Cube()
{
   // Vertices of a unit cube centered at origin, sides aligned with axes
   // This is modified from the original in that the vertices are specified by
   // assignment statements.
   
   vertices[0] = point4(-0.5, -0.5, 0.5, 1.0);
   vertices[1] = point4(-0.5, 0.5, 0.5, 1.0);
   vertices[2] = point4(0.5, 0.5, 0.5, 1.0);
   vertices[3] = point4(0.5, -0.5, 0.5, 1.0);
   vertices[4] = point4(-0.5, -0.5, -0.5, 1.0);
   vertices[5] = point4(-0.5, 0.5, -0.5, 1.0);
   vertices[6] = point4(0.5, 0.5, -0.5, 1.0);
   vertices[7] = point4(0.5, -0.5, -0.5, 1.0);
   

   // RGBA colors
   // This is modified from the original in that the vertices are specified by
   // assignment statements.

   vertex_colors[0] = color4(0.0, 0.0, 0.0, 1.0);  // black
   vertex_colors[1] = color4(1.0, 0.0, 0.0, 1.0);  // red
   vertex_colors[2] = color4(1.0, 1.0, 0.0, 1.0);  // yellow
   vertex_colors[3] = color4(0.0, 1.0, 0.0, 1.0);  // green
   vertex_colors[4] = color4(0.0, 0.0, 1.0, 1.0);  // blue
   vertex_colors[5] = color4(1.0, 0.0, 1.0, 1.0);  // magenta
   vertex_colors[6] = color4(1.0, 1.0, 1.0, 1.0);  // white
   vertex_colors[7] = color4(0.0, 1.0, 1.0, 1.0);   // cyan
 
   //calls private method quad to divide the six faces into 2 triangles each.
   //The outward facing faces, e.g. 1,0,3,2 are those for which the right- 
   //hand rule applies: if the fingers of the right hand are curled in the 
   //direction of the vertex traversal, the thumb points outward.
   quad(1, 0, 3, 2);
   quad(2, 3, 7, 6);
   quad(3, 0, 4, 7);
   quad(6, 5, 1, 2);
   quad(4, 5, 6, 7);
   quad(5, 4, 0, 1);
}