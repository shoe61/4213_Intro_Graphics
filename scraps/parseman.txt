#include <fstream>
#include <iostream>
#include <string>
#include <sstream>


using namespace std;

void main() // reads and parses the data in an object file
{
   string line;
   ifstream infile("cube.obj");
   stringstream t;
   const int BUFFSIZE = 80;
   char buff[BUFFSIZE];
   char buff2[BUFFSIZE];
   int j = 0;
   
   //traverses infile by line and reads character at a time into t
   if (infile.is_open())
   {
      while (getline(infile, line))
      {
         j++; //this is to count the lines

         for (int i = 0; i < line.size(); i++)
         {
            char c = line[i];
            t << c;

         }
      }
      
      string s = t.str();
      //cout << s;

      // This returns a number, which appears to be the index of the first character in the string
      // (not counting #s) gefunden is just german for found. searching for "v " gives 74, which
      // is the beginning of the first vertex data line...
      size_t gefunden = s.find("v ");
      size_t ende = s.find(" ", gefunden + 2);
      cout << "\ngefunden: " << gefunden << endl;
      cout << "ende: " << ende << endl;
      cout << "ende - (gefunden + 2): " << ende - (gefunden + 2) << endl <<endl;

      size_t tfound = t.str().find("v ");
      cout << "tfound should be equal to gefunden: " << tfound << endl;
     
         // get length of file:
      t.seekg(0, t.end); //moves pointer from start to end
      
      int length = t.tellg(); // length of file is equal to tellg at eof
      
      t.seekg(gefunden + 2, t.beg); // send pointer back to beginning of file with offset of gefunden plus 2
      //-- should be at beginning of first vertex coordinate

      t.read(buff, (ende - (gefunden +2))); // this should read in the first vertex coordinate, 0.232013

      cout << "buff: " << buff << endl;

      cout << "length: " << length << endl;

      




      infile.close();
   }

 
 
   
}

****************************************************************************************************************************

#include <fstream>
#include <iostream>
#include <string>
#include <sstream>


using namespace std;

void main() // reads and parses the data in an object file
{
   string line, s;
   ifstream infile("cube.obj");

   //infile.open("cube.obj");
   //FILE* filz = fopen(c:\);

   stringstream t;
   const int BUFFSIZE = 80;
   char buff[BUFFSIZE];
   char buff2[BUFFSIZE];
   int j = 0;
   
   //traverses infile by line and reads character at a time into t
   if (infile.is_open())
   {
      while (getline(infile, line))
      {
         j++; //this is to count the lines

         for (int i = 0; i < line.size(); i++)
         {
            char c = line[i];
            t << c;
         }
      }
      
      s = t.str(); // the find() function works on string objects but not stringstream objects

      // first, find where the vertex array information begins; this is denoted by "v "
      size_t vert = s.find("v "); //size_t tfound = t.str().find("v ");

      //then read each coordinate from beginning to end
      size_t start = vert + 2; // vertex info starts 2 places after beginning of "v "
      cout << "start: " << start << endl;
      
      size_t ende1 = s.find(' ', start); //look for first " " delimiter after start, which is endo 1st coord
      cout << "ende1: " << ende1 << endl;
      
      size_t ende2 = s.find(' ', ende1 +1); //look for first " " delimiter after endo 1st coord
      cout << "ende2: " << ende2 << endl;

      size_t ende3 = s.find("v ", ende2 + 1); //look for first " " delimiter after endo 2nd coord... this is endo 3rd.
      cout << "ende3: " << ende3 << endl;

      // get length of file:
      //t.seekg(0, t.end); //moves pointer from start to end
      
      
      t.seekg(start, t.beg); // move pointer to t.beg + start
      t.read(buff, ende3 - start); // this should read in the first vertex coordinate, 0.232013
      t.seekg((ende3 - 2), t.beg);

      int lengo = t.tellg();
      cout << "lengo: " << lengo << endl;
      
      cout << "buff: " << buff << endl;

      infile.close();
   }
}

***********************************************************************************************************************************************
#include <fstream>
#include <iostream>
#include <string>
#include <sstream>
#include<vector>


using namespace std;

void main() // reads and parses the data in an object file
{
   
   string line, s;
   ifstream infile("cube.txt");

 
   stringstream t;
   const int BUFFSIZE = 80;
   char buff[BUFFSIZE];
   char buff2[BUFFSIZE];
   int j = 0;

   //traverses infile by line and reads character at a time into t
   if (infile.is_open())
   {
      while (getline(infile, line))
      {
         //j++; //this is to count the lines

         for (int i = 0; i < line.size(); i++)
         {
            char c = line[i];
            t << c;
         }

         const char *cstr = (t.str()).c_str();
         //const char *cstr = "v 0.232013 - 0.232013 - 0.232013";


         float a, b, c;
        
         s = t.str();

         t.str("");
         //cout << "s: " << s << endl;
                

         size_t v = s.find("v ");
         cout << "v: " << v << endl;

         if (v == 0)
         {
            scanf_s(cstr, "%d %d %d\n", &a, &b, &c);

            printf("verts:  %d, %d, %d\n", a, b, c);

         }
         else{ continue;}
       
      }

     

   }
}

***************************************************************************************************************

void openFileRead(ifstream& in)
{
	char inFileName[40];
	cout << " Please enter the input file name : ";
	cin >> inFileName;
	in.open(inFileName);

	//Display error message if file fails to open.
	if (in.fail())
	{
		cout << "Couldn't open the file.\n";
		cout << "Check the file name and location\n";
		system("pause");
		exit(0);
	}
}

void initializeMaze(ifstream& in, char theMaze[][SIZE])
{
	//Inspect file for invalid characters
	for (int i = 0; i < SIZE; i++)
	{
		for (int j = 0; j < SIZE; j++)
		{
			in >> theMaze[i][j];
			if ((theMaze[i][j] != '%') && (theMaze[i][j] != '.'))
			{
				cout << endl << endl;
				cout << "This file has an invalid character, '";
				cout << theMaze[i][j];
				cout << "', at row " << i << ", column " << j << ".";
				cout << endl << endl;
				system("pause");
				exit(0);
			}
		}